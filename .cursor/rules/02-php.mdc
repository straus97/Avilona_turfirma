# PHP Development Rules

## üéØ –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

### –°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
- –°–ª–µ–¥—É–π PSR-12 —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É
- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é
- –ü—Ä–∏–º–µ–Ω—è–π DocBlock –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –°–æ–±–ª—é–¥–∞–π –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID
- –ò—Å–ø–æ–ª—å–∑—É–π meaningful –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–π

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
- –û–¥–∏–Ω –∫–ª–∞—Å—Å –Ω–∞ —Ñ–∞–π–ª
- –ò—Å–ø–æ–ª—å–∑—É–π namespaces
- –ü—Ä–∏–º–µ–Ω—è–π autoloading
- –°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

## üìù –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏ —Å—Ç–∏–ª—å

### –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
```php
// –•–æ—Ä–æ—à–æ
$userName = 'john_doe';
$isActive = true;
$userCount = 0;

// –ü–ª–æ—Ö–æ
$u = 'john_doe';
$flag = true;
$cnt = 0;
```

### –§—É–Ω–∫—Ü–∏–∏ –∏ –º–µ—Ç–æ–¥—ã
```php
// –•–æ—Ä–æ—à–æ - —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—É—Ä–∞
 *
 * @param float $basePrice –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
 * @param int $nights –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
 * @param float $discount –°–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
 * @return float –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
 */
public function calculateTotalPrice(float $basePrice, int $nights, float $discount = 0.0): float
{
    $total = $basePrice * $nights;
    
    if ($discount > 0) {
        $total -= $total * ($discount / 100);
    }
    
    return round($total, 2);
}

// –ü–ª–æ—Ö–æ - –±–µ–∑ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
public function calc($price, $nights, $disc = 0)
{
    $total = $price * $nights;
    if ($disc > 0) {
        $total -= $total * ($disc / 100);
    }
    return $total;
}
```

### –£—Å–ª–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
```php
// –•–æ—Ä–æ—à–æ
if ($user->isActive() && $user->hasPermission('book_tour')) {
    $this->processBooking($booking);
}

// –ü–ª–æ—Ö–æ
if($user->isActive()==true && $user->hasPermission('book_tour')==true){
    $this->processBooking($booking);
}
```

### –¶–∏–∫–ª—ã
```php
// –•–æ—Ä–æ—à–æ
foreach ($tours as $tour) {
    if ($tour->isAvailable()) {
        $availableTours[] = $tour;
    }
}

// –ü–ª–æ—Ö–æ
for($i=0;$i<count($tours);$i++){
    if($tours[$i]->isAvailable()==true){
        $availableTours[]=$tours[$i];
    }
}
```

## üèó –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

### Service Layer
```php
<?php

namespace App\Services;

use App\Models\Tour;
use App\Models\Booking;
use App\Repositories\TourRepository;
use Illuminate\Support\Collection;

class TourBookingService
{
    public function __construct(
        private TourRepository $tourRepository
    ) {}

    public function searchAvailableTours(array $criteria): Collection
    {
        $tours = $this->tourRepository->search($criteria);
        
        return $tours->filter(function (Tour $tour) {
            return $this->isTourAvailable($tour);
        });
    }

    private function isTourAvailable(Tour $tour): bool
    {
        $bookedSlots = $tour->bookings()
            ->where('status', '!=', 'cancelled')
            ->sum('participants_count');
            
        return $bookedSlots < $tour->max_participants;
    }
}
```

### Repository Pattern
```php
<?php

namespace App\Repositories;

use App\Models\Tour;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Pagination\LengthAwarePaginator;

class TourRepository
{
    public function search(array $criteria): Collection
    {
        $query = Tour::query();

        if (isset($criteria['departure_city'])) {
            $query->where('departure_city', $criteria['departure_city']);
        }

        if (isset($criteria['destination_country'])) {
            $query->where('destination_country', $criteria['destination_country']);
        }

        if (isset($criteria['start_date'])) {
            $query->where('start_date', '>=', $criteria['start_date']);
        }

        if (isset($criteria['price_max'])) {
            $query->where('price', '<=', $criteria['price_max']);
        }

        return $query->get();
    }

    public function findById(int $id): ?Tour
    {
        return Tour::find($id);
    }

    public function paginate(int $perPage = 15): LengthAwarePaginator
    {
        return Tour::paginate($perPage);
    }
}
```

## üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

### –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
```php
// –•–æ—Ä–æ—à–æ
public function validateEmail(string $email): bool
{
    return filter_var($email, FILTER_VALIDATE_EMAIL) !== false;
}

public function sanitizeInput(string $input): string
{
    return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
}

// –ü–ª–æ—Ö–æ
public function processInput($data)
{
    return $data; // –ë–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏
}
```

### –†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä–æ–ª—è–º–∏
```php
// –•–æ—Ä–æ—à–æ
public function hashPassword(string $password): string
{
    return password_hash($password, PASSWORD_DEFAULT);
}

public function verifyPassword(string $password, string $hash): bool
{
    return password_verify($password, $hash);
}

// –ü–ª–æ—Ö–æ
public function hashPassword($password)
{
    return md5($password); // –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π
}
```

### SQL Injection –∑–∞—â–∏—Ç–∞
```php
// –•–æ—Ä–æ—à–æ - –∏—Å–ø–æ–ª—å–∑—É–π prepared statements
public function findUserByEmail(string $email): ?User
{
    $stmt = $this->pdo->prepare('SELECT * FROM users WHERE email = ?');
    $stmt->execute([$email]);
    
    return $stmt->fetchObject(User::class);
}

// –ü–ª–æ—Ö–æ - —É—è–∑–≤–∏–º–æ –¥–ª—è SQL injection
public function findUserByEmail($email)
{
    $sql = "SELECT * FROM users WHERE email = '$email'";
    return $this->pdo->query($sql)->fetchObject(User::class);
}
```

## ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å

### –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
```php
// –•–æ—Ä–æ—à–æ - –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
public function getActiveTours(): Collection
{
    return Tour::select(['id', 'title', 'price', 'start_date'])
        ->where('is_active', true)
        ->where('start_date', '>', now())
        ->orderBy('start_date')
        ->limit(20)
        ->get();
}

// –ü–ª–æ—Ö–æ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
public function getActiveTours()
{
    return Tour::where('is_active', true)->get();
}
```

### –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
```php
// –•–æ—Ä–æ—à–æ
public function getPopularDestinations(): Collection
{
    return Cache::remember('popular_destinations', 3600, function () {
        return Tour::select('destination_country')
            ->groupBy('destination_country')
            ->orderByRaw('COUNT(*) DESC')
            ->limit(10)
            ->pluck('destination_country');
    });
}

// –ü–ª–æ—Ö–æ - –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
public function getPopularDestinations()
{
    return Tour::select('destination_country')
        ->groupBy('destination_country')
        ->orderByRaw('COUNT(*) DESC')
        ->limit(10)
        ->pluck('destination_country');
}
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
```php
// –•–æ—Ä–æ—à–æ
try {
    $result = $this->externalApiService->getTourData($tourId);
    
    if (!$result) {
        throw new TourNotFoundException("–¢—É—Ä —Å ID {$tourId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    
    return $result;
} catch (ApiException $e) {
    Log::error('–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–∞', [
        'tour_id' => $tourId,
        'error' => $e->getMessage()
    ]);
    
    throw new ServiceUnavailableException('–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

// –ü–ª–æ—Ö–æ
public function getTourData($tourId)
{
    $result = $this->externalApiService->getTourData($tourId);
    return $result; // –ë–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
}
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### Unit —Ç–µ—Å—Ç—ã
```php
<?php

namespace Tests\Unit;

use App\Services\PriceCalculatorService;
use PHPUnit\Framework\TestCase;

class PriceCalculatorServiceTest extends TestCase
{
    private PriceCalculatorService $service;

    protected function setUp(): void
    {
        $this->service = new PriceCalculatorService();
    }

    public function test_calculates_total_price_without_discount(): void
    {
        $result = $this->service->calculateTotalPrice(1000.0, 7, 0.0);
        
        $this->assertEquals(7000.0, $result);
    }

    public function test_calculates_total_price_with_discount(): void
    {
        $result = $this->service->calculateTotalPrice(1000.0, 7, 10.0);
        
        $this->assertEquals(6300.0, $result);
    }

    public function test_throws_exception_for_negative_price(): void
    {
        $this->expectException(\InvalidArgumentException::class);
        $this->expectExceptionMessage('–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π');
        
        $this->service->calculateTotalPrice(-100.0, 7);
    }
}
```

## üì± –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
```php
// –•–æ—Ä–æ—à–æ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
public function getMobileTourData(Tour $tour): array
{
    return [
        'id' => $tour->id,
        'title' => $tour->title,
        'price' => $tour->price,
        'image' => $tour->getMobileImageUrl(),
        'duration' => $tour->getDurationInDays(),
        'rating' => $tour->average_rating,
        'is_available' => $tour->isAvailable(),
    ];
}

// –ü–ª–æ—Ö–æ - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
public function getMobileTourData(Tour $tour)
{
    return $tour->toArray(); // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
}
```

## üîç SEO –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è

### –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
```php
// –•–æ—Ä–æ—à–æ
public function generateMetaData(Tour $tour): array
{
    return [
        'title' => "{$tour->title} - –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –ê–≤–∏–ª–æ–Ω–∞",
        'description' => $this->truncateText($tour->description, 160),
        'keywords' => implode(', ', [
            $tour->destination_country,
            $tour->departure_city,
            '—Ç—É—Ä—ã',
            '–æ—Ç–¥—ã—Ö',
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'
        ]),
        'og_title' => $tour->title,
        'og_description' => $this->truncateText($tour->description, 160),
        'og_image' => $tour->getSocialImageUrl(),
    ];
}

private function truncateText(string $text, int $length): string
{
    return mb_strlen($text) > $length 
        ? mb_substr($text, 0, $length) . '...'
        : $text;
}
```

## üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

### –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
```php
// –•–æ—Ä–æ—à–æ
public function logBookingCreation(Booking $booking): void
{
    Log::info('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞', [
        'booking_id' => $booking->id,
        'user_id' => $booking->user_id,
        'tour_id' => $booking->tour_id,
        'price' => $booking->total_price,
        'created_at' => $booking->created_at->toISOString(),
    ]);
}

// –ü–ª–æ—Ö–æ
public function logBookingCreation($booking)
{
    Log::info("Booking created: {$booking->id}"); // –ù–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
}
```

## üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

### –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
```php
// –•–æ—Ä–æ—à–æ - –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
public function getApiEndpoint(): string
{
    return config('services.tour_api.endpoint');
}

public function getCacheTtl(): int
{
    return config('cache.tour_search_ttl', 3600);
}

// –ü–ª–æ—Ö–æ - —Ö–∞—Ä–¥–∫–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π
public function getApiEndpoint()
{
    return 'https://api.tours.com/v1'; // –•–∞—Ä–¥–∫–æ–¥
}
```

### –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
```php
// –•–æ—Ä–æ—à–æ
public function handleApiException(ApiException $e): void
{
    if ($e->getCode() === 429) {
        // Rate limit exceeded
        Log::warning('API rate limit exceeded', [
            'service' => 'tour_api',
            'retry_after' => $e->getRetryAfter(),
        ]);
        
        throw new ServiceTemporarilyUnavailableException(
            '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
    }
    
    Log::error('API error occurred', [
        'service' => 'tour_api',
        'error_code' => $e->getCode(),
        'error_message' => $e->getMessage(),
    ]);
    
    throw new ServiceUnavailableException('–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}
```